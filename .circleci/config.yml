develop_only: &develop_only
  filters:
    branches:
      only: develop

master_only: &master_only
  filters:
    branches:
      only: master


version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@8.1.2
executors:
  docker-publisher:
    docker:
      - image: circleci/buildpack-deps@sha256:f15719b269c2c7337d2fb29a31abf4edcfe30311291765b831e699b0ad9ae77d

jobs:
  build:
    parameters:
      image-name:
        type: string
      image-tag-suffix:
        type: string
        default: ''
      image-file:
        type: string
      docker-file-path:
        type: string
      auth-host:
        type: string
        default: ''
      auth-client-id:
        type: string
        default: ''
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build << parameters.image-name >> Docker image
          command: docker build -t << parameters.image-name >>:$(echo "$CIRCLE_SHA1" | cut -c -7)<< parameters.image-tag-suffix >>  << parameters.docker-file-path >>
      - run:
          name: Tagging << parameters.image-name >> Docker image
          command: docker tag << parameters.image-name >>:$(echo "$CIRCLE_SHA1" | cut -c -7)<< parameters.image-tag-suffix >> << parameters.image-name >>:latest<< parameters.image-tag-suffix >>
      - run:
          name: Archive API Docker image
          command: docker save -o << parameters.image-file >> << parameters.image-name >>
      - persist_to_workspace:
          root: .
          paths:
            - ./<< parameters.image-file >>

  publish:
    parameters:
      image-name:
        type: string
      image-tag-suffix:
        type: string
        default: ''
      image-file:
        type: string
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived << parameters.image-file >> Docker image
          command: docker load -i /tmp/workspace/<< parameters.image-file >>
      - run:
          name: Publish Docker Images to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push << parameters.image-name >>

  deploy-staging:
    docker:
      - image: airhelp/kops:1.10
    steps:
      - checkout
      - run:
          command: |
            # connect to cluster
            export KUBE_CLUSTER=fsi.staging.frontiersi.io
            export KUBE_SERVER=https://api.fsi.staging.frontiersi.io/
            kubectl config set-cluster $KUBE_CLUSTER --server=$KUBE_SERVER --insecure-skip-tls-verify=true
            kubectl config set-credentials $KUBE_USER --token=$KUBE_TOKEN
            kubectl config set-context fsi.staging.frontiersi.io --cluster=$KUBE_CLUSTER --user=$KUBE_USER
            kubectl config use-context fsi.staging.frontiersi.io
            # update image to latest
            export IMAGE_TAG=$(echo "$CIRCLE_SHA1" | cut -c -7)-beta
            kubectl set image --namespace=qa4mbes deployment/api api=ausseabed/spt-api:$IMAGE_TAG
            kubectl set image --namespace=qa4mbes deployment/www www=ausseabed/spt-www:$IMAGE_TAG
            kubectl set image --namespace=qa4mbes deployment/mapserver mapserver=ausseabed/spt-mapserver:$IMAGE_TAG


workflows:
  build_and_push_staging_api:
    jobs:
      - aws-ecr/build-and-push-image:
          aws-access-key-id: STAGING_ACCESS_KEY_ID
          aws-cli-version: latest
          aws-secret-access-key: STAGING_SECRET_ACCESS_KEY
          dockerfile: Dockerfile
          executor: aws-ecr/default
          extra-build-args: '--compress'
          no-output-timeout: 20m
          path: ./server
          platform: linux/amd64
          public-registry: false
          push-image: true
          region: ap-southeast-2
          registry-id: STAGING_AWS_ECR_REGISTRY_ID
          repo: ausseabed-staging-sct-api
          repo-scan-on-push: true
          skip-when-tags-exist: false
          tag: 'latest, $CIRCLE_SHA1'
          <<: *develop_only
      - aws-ecr/build-and-push-image:
          aws-access-key-id: STAGING_ACCESS_KEY_ID
          aws-cli-version: latest
          aws-secret-access-key: STAGING_SECRET_ACCESS_KEY
          dockerfile: Dockerfile
          executor: aws-ecr/default
          extra-build-args: '--compress'
          no-output-timeout: 20m
          path: ./client
          platform: linux/amd64
          public-registry: false
          push-image: true
          region: ap-southeast-2
          registry-id: STAGING_AWS_ECR_REGISTRY_ID
          repo: ausseabed-staging-sct-www
          repo-scan-on-push: true
          skip-when-tags-exist: false
          tag: 'latest, $CIRCLE_SHA1'
          <<: *develop_only
      - aws-ecr/build-and-push-image:
          aws-access-key-id: STAGING_ACCESS_KEY_ID
          aws-cli-version: latest
          aws-secret-access-key: STAGING_SECRET_ACCESS_KEY
          dockerfile: Dockerfile
          executor: aws-ecr/default
          extra-build-args: '--compress'
          no-output-timeout: 20m
          path: ./map
          platform: linux/amd64
          public-registry: false
          push-image: true
          region: ap-southeast-2
          registry-id: STAGING_AWS_ECR_REGISTRY_ID
          repo: ausseabed-staging-sct-mapserver
          repo-scan-on-push: true
          skip-when-tags-exist: false
          tag: 'latest, $CIRCLE_SHA1'
          <<: *develop_only

  # version: 2
  # build-develop:
  #   jobs:
  #     - build:
  #         name: build-api-develop
  #         image-name: ausseabed/spt-api
  #         image-tag-suffix: '-beta'
  #         image-file: image-api.tar
  #         docker-file-path: server
  #         <<: *develop_only
  #     - publish:
  #         name: publish-api-develop
  #         image-name: ausseabed/spt-api
  #         image-tag-suffix: '-beta'
  #         image-file: image-api.tar
  #         requires:
  #           - build-api-develop
  #         <<: *develop_only
  #     - build:
  #         name: build-www-develop
  #         image-name: ausseabed/spt-www
  #         image-tag-suffix: '-beta'
  #         image-file: image-www.tar
  #         docker-file-path: client
  #         <<: *develop_only
  #     - publish:
  #         name: publish-www-develop
  #         image-name: ausseabed/spt-www
  #         image-tag-suffix: '-beta'
  #         image-file: image-www.tar
  #         requires:
  #           - build-www-develop
  #         <<: *develop_only
  #     - build:
  #         name: build-mapserver-develop
  #         image-name: ausseabed/spt-mapserver
  #         image-tag-suffix: '-beta'
  #         image-file: image-mapserver.tar
  #         docker-file-path: map
  #         <<: *develop_only
  #     - publish:
  #         name: publish-mapserver-develop
  #         image-name: ausseabed/spt-mapserver
  #         image-tag-suffix: '-beta'
  #         image-file: image-mapserver.tar
  #         requires:
  #           - build-mapserver-develop
  #         <<: *develop_only
  #     - deploy-staging:
  #         requires:
  #           - publish-www-develop
  #           - publish-mapserver-develop
  #           - publish-api-develop
  #         <<: *develop_only

  # build-master:
  #   jobs:
  #     - build:
  #         name: build-api-master
  #         image-name: ausseabed/spt-api
  #         image-file: image-api.tar
  #         docker-file-path: server
  #         <<: *master_only
  #     - publish:
  #         name: publish-api-master
  #         image-name: ausseabed/spt-api
  #         image-file: image-api.tar
  #         requires:
  #           - build-api-master
  #         <<: *master_only
  #     - build:
  #         name: build-www-master
  #         image-name: ausseabed/spt-www
  #         image-file: image-www.tar
  #         docker-file-path: client
  #         <<: *master_only
  #     - publish:
  #         name: publish-www-master
  #         image-name: ausseabed/spt-www
  #         image-file: image-www.tar
  #         requires:
  #           - build-www-master
  #         <<: *master_only
  #     - build:
  #         name: build-mapserver-master
  #         image-name: ausseabed/spt-mapserver
  #         image-file: image-mapserver.tar
  #         docker-file-path: map
  #         <<: *master_only
  #     - publish:
  #         name: publish-mapserver-master
  #         image-name: ausseabed/spt-mapserver
  #         image-file: image-mapserver.tar
  #         requires:
  #           - build-mapserver-master
  #         <<: *master_only
